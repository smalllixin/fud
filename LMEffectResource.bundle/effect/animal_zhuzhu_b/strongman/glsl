//@[@[@6,@16,@26,@46,@74,@77,@84,@90,@13,@19],@[@6,@16,@26,@46,@74,@77,@84,@90,@13,@19]] zhuzhu
precision highp float;
varying highp vec2 textureCoordinate;

uniform sampler2D inputImageTexture;
uniform sampler2D inputImageTexture2;//godlight


uniform lowp vec2 location0;
uniform lowp vec2 location1;
uniform lowp vec2 location2;
uniform lowp vec2 location3;
uniform lowp vec2 location4;
uniform lowp vec2 location5;
uniform lowp vec2 location6;
uniform lowp vec2 location7;
uniform lowp vec2 location8;
uniform lowp vec2 location9;
uniform lowp vec2 location10;
uniform lowp vec2 location11;
uniform lowp vec2 location12;
uniform lowp vec2 location13;
uniform lowp vec2 location14;
uniform lowp vec2 location15;
uniform lowp vec2 location16;
uniform lowp vec2 location17;
uniform lowp vec2 location18;
uniform lowp vec2 location19;


#define p_faceleft location0
#define p_chin location1
#define p_faceright location2
#define p_nose location3
#define p_eyea location4
#define p_eyeb location5
#define p_left location6
#define p_right location7
#define p_chinleft location8
#define p_chinright location9

#define p_faceleft2 location10
#define p_chin2 location11
#define p_faceright2 location12
#define p_nose2 location13
#define p_eyea2 location14
#define p_eyeb2 location15
#define p_left2 location16
#define p_right2 location17
#define p_chinleft2 location18
#define p_chinright2 location19

#define x_a 0.72
#define y_a 1.28


vec4 blendNormal(vec4 c1, vec4 c2)
{
vec4 outputColor;
outputColor.r = c1.r + c2.r * c2.a * (1.0 - c1.a);
outputColor.g = c1.g + c2.g * c2.a * (1.0 - c1.a);
outputColor.b = c1.b + c2.b * c2.a * (1.0 - c1.a);
outputColor.a = c1.a + c2.a * (1.0 - c1.a);
return outputColor;
}

vec2 faceStretch(vec2 textureCoord, vec2 originPosition, vec2 targetPosition, float radius, float curve)
{
vec2 direction = targetPosition - originPosition;
float lengthA = length(direction);
float lengthB = min(lengthA, radius);
direction *= lengthB / lengthA;
float infect = distance(textureCoord, originPosition)/radius;
infect = clamp(1.0-infect,0.0,1.0);
infect = pow(infect, curve);

return direction * infect;
}

void main()
{

gl_FragColor = texture2D(inputImageTexture,textureCoordinate);

vec2 newCoord = textureCoordinate;


if(location3.x>0.03 && location3.y>0.03)
{
vec2 eyea = vec2(p_eyea.x * x_a, p_eyea.y * y_a);
vec2 eyeb = vec2(p_eyeb.x * x_a, p_eyeb.y * y_a);
vec2 left = vec2(p_left.x * x_a, p_left.y * y_a);
vec2 right = vec2(p_right.x * x_a, p_right.y * y_a);

float aspect = 0.5625;
float weight = 0.0;
float face_width = distance(eyea,eyeb);


float eyedis = face_width;

// face1

vec2 tt = p_nose + (p_faceleft - p_nose)*0.7;
aspect = 0.5625;
float aa = 1.0;
float bb =distance(left,right)*0.7;
float dis_eye1 = distance(vec2(newCoord.x*aspect,newCoord.y), vec2(tt.x*aspect,tt.y));
if(dis_eye1 <= bb)
{
weight = pow(dis_eye1 /bb, 0.3);
newCoord.x = tt.x +(newCoord.x - tt.x) * weight;
newCoord.y = tt.y +(newCoord.y - tt.y) * weight;
}

// face2

tt = p_nose + (p_faceright - p_nose)*0.7;
float dis_eye2 = distance(vec2(newCoord.x*aspect,newCoord.y), vec2(tt.x*aspect,tt.y));
if(dis_eye2 <= bb)
{
weight = pow(dis_eye2 /bb, 0.3);
newCoord.x = tt.x +(newCoord.x - tt.x) * weight;
newCoord.y = tt.y +(newCoord.y - tt.y) * weight;
}

// eye1
aspect = 0.5625;
float eyeRadius = distance(left, right)*0.32;
dis_eye1 = distance(vec2(newCoord.x*aspect,newCoord.y), vec2(p_eyea.x*aspect,p_eyea.y));
if(dis_eye1 <= eyeRadius)
{
weight = pow(dis_eye1 / eyeRadius, 0.6);
newCoord.x = p_eyea.x +(newCoord.x - p_eyea.x) * weight;
newCoord.y = p_eyea.y +(newCoord.y - p_eyea.y) * weight;
}

// eye2

aspect = 0.5625;
dis_eye2 = distance(vec2(newCoord.x*aspect,newCoord.y), vec2(p_eyeb.x*aspect,p_eyeb.y));
if(dis_eye2 <= eyeRadius)
{
weight = pow(dis_eye2 / eyeRadius,0.6);
newCoord.x = p_eyeb.x +(newCoord.x - p_eyeb.x) * weight;
newCoord.y = p_eyeb.y +(newCoord.y - p_eyeb.y) * weight;
}


vec2 nose = vec2(p_nose.x, p_nose.y);
vec2 chin = vec2(p_chin.x, p_chin.y);

float radius = face_width*0.6;
vec2 leftF = vec2(p_faceleft.x, p_faceleft.y);
vec2 targetleftF = p_left + (leftF - p_left) * 1.2;
vec2 leftFplus = vec2(0.0);
leftFplus = faceStretch(newCoord, leftF, targetleftF, radius, 1.0);
newCoord = newCoord - leftFplus;

vec2 rightF = vec2(p_faceright.x, p_faceright.y);
vec2 targetrightF = p_right + (rightF - p_right) * 1.2;
vec2 rightFplus = vec2(0.0);
rightFplus = faceStretch(newCoord, rightF, targetrightF, radius, 1.0);
newCoord = newCoord - rightFplus;


radius = face_width*1.5;
vec2 targetchin = nose + (chin - nose) * 0.9;
vec2 chinplus = vec2(0.0);
chinplus = faceStretch(newCoord, chin, targetchin, radius, 1.0);
newCoord = newCoord - chinplus;

vec2 chinup = chin + (nose-chin)*0.4;
radius = face_width*0.5;
vec2 targetchinup = nose + (chinup - nose) * 0.9;
vec2 chinupplus = vec2(0.0);
chinupplus = faceStretch(newCoord, chinup, targetchinup, radius, 1.0);
newCoord = newCoord - chinupplus;

radius = face_width*1.0;
vec2 leftC = vec2(p_chinleft.x, p_chinleft.y);
vec2 targetleftC = nose + (leftC - nose) * 0.95;
vec2 leftCplus = vec2(0.0);
leftCplus = faceStretch(newCoord, leftC, targetleftC, radius, 1.0);
newCoord = newCoord - leftCplus;

vec2 rightC = vec2(p_chinright.x, p_chinright.y);
vec2 targetrightC = nose + (rightC - nose) * 0.95;
vec2 rightCplus = vec2(0.0);
rightCplus = faceStretch(newCoord, rightC, targetrightC, radius, 1.0);
newCoord = newCoord - rightCplus;






gl_FragColor = texture2D(inputImageTexture, newCoord);
}



if(location13.x>0.03 && location13.y>0.03)
{
vec2 eyea = vec2(p_eyea2.x * x_a, p_eyea2.y * y_a);
vec2 eyeb = vec2(p_eyeb2.x * x_a, p_eyeb2.y * y_a);
vec2 left = vec2(p_left2.x * x_a, p_left2.y * y_a);
vec2 right = vec2(p_right2.x * x_a, p_right2.y * y_a);

float aspect = 0.5625;
float weight = 0.0;
float face_width = distance(eyea,eyeb);


float eyedis = face_width;

// face1

vec2 tt = p_left2 + (p_faceleft2 - p_left2)*0.5;
aspect = 0.5625;
float aa = 1.0;
float bb =distance(left,right)*0.75;
float dis_eye1 = distance(vec2(newCoord.x*aspect,newCoord.y), vec2(tt.x*aspect,tt.y));
if(dis_eye1 <= bb)
{
weight = pow(dis_eye1 /bb, 0.6);
newCoord.x = tt.x +(newCoord.x - tt.x) * weight;
newCoord.y = tt.y +(newCoord.y - tt.y) * weight;
}

// face2

tt = p_right2 + (p_faceright2 - p_right2)*0.5;
float dis_eye2 = distance(vec2(newCoord.x*aspect,newCoord.y), vec2(tt.x*aspect,tt.y));
if(dis_eye2 <= bb)
{
weight = pow(dis_eye2 /bb, 0.6);
newCoord.x = tt.x +(newCoord.x - tt.x) * weight;
newCoord.y = tt.y +(newCoord.y - tt.y) * weight;
}

// eye1
aspect = 0.5625;
float eyeRadius = distance(left, right)*0.32;
dis_eye1 = distance(vec2(newCoord.x*aspect,newCoord.y), vec2(p_eyea2.x*aspect,p_eyea2.y));
if(dis_eye1 <= eyeRadius)
{
weight = pow(dis_eye1 / eyeRadius, 0.3);
newCoord.x = p_eyea2.x +(newCoord.x - p_eyea2.x) * weight;
newCoord.y = p_eyea2.y +(newCoord.y - p_eyea2.y) * weight;
}

// eye2

aspect = 0.5625;
dis_eye2 = distance(vec2(newCoord.x*aspect,newCoord.y), vec2(p_eyeb2.x*aspect,p_eyeb2.y));
if(dis_eye2 <= eyeRadius)
{
weight = pow(dis_eye2 / eyeRadius,0.3);
newCoord.x = p_eyeb2.x +(newCoord.x - p_eyeb2.x) * weight;
newCoord.y = p_eyeb2.y +(newCoord.y - p_eyeb2.y) * weight;
}


vec2 nose = vec2(p_nose2.x, p_nose2.y);
vec2 chin = vec2(p_chin2.x, p_chin2.y);

float radius = face_width*0.6;
vec2 leftF = vec2(p_faceleft2.x, p_faceleft2.y);
vec2 targetleftF = p_left2 + (leftF - p_left2) * 1.2;
vec2 leftFplus = vec2(0.0);
leftFplus = faceStretch(newCoord, leftF, targetleftF, radius, 1.0);
newCoord = newCoord - leftFplus;

vec2 rightF = vec2(p_faceright2.x, p_faceright2.y);
vec2 targetrightF = p_right2 + (rightF - p_right2) * 1.2;
vec2 rightFplus = vec2(0.0);
rightFplus = faceStretch(newCoord, rightF, targetrightF, radius, 1.0);
newCoord = newCoord - rightFplus;


radius = face_width*1.5;
vec2 targetchin = nose + (chin - nose) * 0.9;
vec2 chinplus = vec2(0.0);
chinplus = faceStretch(newCoord, chin, targetchin, radius, 1.0);
newCoord = newCoord - chinplus;

vec2 chinup = chin + (nose-chin)*0.4;
radius = face_width*0.5;
vec2 targetchinup = nose + (chinup - nose) * 0.9;
vec2 chinupplus = vec2(0.0);
chinupplus = faceStretch(newCoord, chinup, targetchinup, radius, 1.0);
newCoord = newCoord - chinupplus;


radius = face_width*1.0;
vec2 leftC = vec2(p_chinleft2.x, p_chinleft2.y);
vec2 targetleftC = nose + (leftC - nose) * 0.95;
vec2 leftCplus = vec2(0.0);
leftCplus = faceStretch(newCoord, leftC, targetleftC, radius, 1.0);
newCoord = newCoord - leftCplus;

vec2 rightC = vec2(p_chinright2.x, p_chinright2.y);
vec2 targetrightC = nose + (rightC - nose) * 0.95;
vec2 rightCplus = vec2(0.0);
rightCplus = faceStretch(newCoord, rightC, targetrightC, radius, 1.0);
newCoord = newCoord - rightCplus;






gl_FragColor = texture2D(inputImageTexture, newCoord);
}









}